---
description: when implementing a tool or an action
globs: 
alwaysApply: false
---
Assume the input is a dict and the result must also be a dict.

Get the user input from the field `input` as a string. Handle the case of `input` missing or an empty string with a default message describing what the tool does.

Always return the result as a dict, with a field `output` that must be a string. Use `output` also to return errors.

Add additional results in the result dict only in the `html` field as an HTML string.

Use only Postgres as Relational Database and Milvus as Vector Database.

Assume you have already available the library `requests` for REST apis, `redis` for redis, `psycopg` for postgres, `boto3` for s3,  `pymilvus` for Miluvs, and `openai` for AI requests. 

Do not try to add other libraries with `pip` or a `requirements.txt`
